简单一下更新进度：
day1（2025/10/25）：
    之前就有把游戏中的文件夹架构划分好，但是没做记录。现在，对游戏进行了正式的更新。目前在unity中创建并配置好了player对象和obstacle对象。在script中更新了挂载在player对象上的游戏主函数。

day2（2025/10/26）：
    昨天写的代码有点问题，玩家在撞到墙的时候，会因为x轴的方向上的velocity太大导致玩家在空中，对着场景方块按着a，d键，会直接贴在场景方块的侧边不下坠。因此，添加了OnCollisionEnter2D函数来判断玩家是否碰到场景
    方块的侧边，当碰到场景方块的侧边的时候，就将原本的velocity乘上0.1。
    再次更新，
    早上写的代码中，用OnCollisionEnter2D函数来判断玩家是否碰到场景方块的侧边，这样就会在玩家刚2碰到场景方块的时候对玩家进行检测侧面的碰撞。但是，现在想要在玩家按下s，或下方向键的时候，使玩家能够穿过场景方块
    （站在场景方块的上面的时候能够向下穿过去）。如果直接将判断穿过方块的代码放到OnCollisionEnter2D函数中的话，则只有在玩家刚刚接触的瞬间按下s，下方向键的时候才能穿过场景方块。因此，改为使
    用OnCollisionStay2D函数，虽然还是达不到预期中的效果，但是，目前来说能够在刚接触场景方块的时候卡一下再接收按键命令进行穿过也够了。

day3（2025/10/27）：
    在上一版本中用OnCollisionStay2D函数搭配对碰撞器collider.enabled的开关，来实现穿过平台的效果。但是，效果不是很好，于是换成用unity中的自带的遮罩组件（Platform Effector 2D）。

day4（2025/10/28）：
    完成移动部分之后，开始做玩家与其他物体的交互，这次主要是做了玩家与功能性物品之间的交互。在代码中用Physics2D.OverlapCircleAll();函数来检测玩家为中心半径为interactionRange内的带有ChestInventory脚本的
    游戏对象，并将其放到数组hitColliders中，再由foreach(){}遍历每个游戏对象，将其中距离玩家最近的对象放到nearbyChest中。只要按下F键的时候就会调用定义的ToggleChest();函数来切换当前nearbyChest的UI的开关。
    但是，目前并没有做对UI中的东西进行操作的脚本，没有做对打开的UI界面进行挨个关闭的部分。
    